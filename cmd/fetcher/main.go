/*
 * jessemichael.me internal
 *
 * Internal workings of Jesse Michael
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"log"
	"net/http"

	"github.com/ahmdrz/goinsta/v2"
	"github.com/dghubble/go-twitter/twitter"
	fetcher "github.com/jesse0michael/fetcher/pkg/fetcher"
	"github.com/joho/godotenv"
	"github.com/kelseyhightower/envconfig"
	"golang.org/x/oauth2"
	"golang.org/x/oauth2/clientcredentials"
)

func main() {
	log.Printf("Server started")
	_ = godotenv.Load()
	var cfg fetcher.Config
	if err := envconfig.Process("", &cfg); err != nil {
		log.Fatal("failed to process config")
	}

	// oauth2 configures a client that uses app credentials to keep a fresh token
	config := &clientcredentials.Config{
		ClientID:     cfg.Twitter.ClientID,
		ClientSecret: cfg.Twitter.ClientSecret,
		TokenURL:     cfg.Twitter.TokenURL,
	}
	// http.Client will automatically authorize Requests
	httpClient := config.Client(oauth2.NoContext)

	// Twitter client
	twitterClient := twitter.NewClient(httpClient)

	insta := goinsta.New(cfg.Instagram.Username, cfg.Instagram.Password)
	if err := insta.Login(); err != nil {
		log.Fatalf("failed to log into instagram: %s", cfg.Instagram.Password)
	}

	DefaultAPIService := fetcher.NewDefaultApiService(twitterClient, insta)
	DefaultAPIController := fetcher.NewDefaultApiController(DefaultAPIService)

	router := fetcher.NewRouter(DefaultAPIController)

	log.Fatal(http.ListenAndServe(":80", router))
}
