// Code generated by MockGen. DO NOT EDIT.
// Source: servicer.go

// Package server is a generated GoMock package.
package server

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFeedServicer is a mock of FeedServicer interface.
type MockFeedServicer struct {
	ctrl     *gomock.Controller
	recorder *MockFeedServicerMockRecorder
}

// MockFeedServicerMockRecorder is the mock recorder for MockFeedServicer.
type MockFeedServicerMockRecorder struct {
	mock *MockFeedServicer
}

// NewMockFeedServicer creates a new mock instance.
func NewMockFeedServicer(ctrl *gomock.Controller) *MockFeedServicer {
	mock := &MockFeedServicer{ctrl: ctrl}
	mock.recorder = &MockFeedServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedServicer) EXPECT() *MockFeedServicerMockRecorder {
	return m.recorder
}

// GetFeed mocks base method.
func (m *MockFeedServicer) GetFeed(twitterID, instagramID int64, bloggerID, soundcloudID, swarmID, deviantartID string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeed", twitterID, instagramID, bloggerID, soundcloudID, swarmID, deviantartID)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed.
func (mr *MockFeedServicerMockRecorder) GetFeed(twitterID, instagramID, bloggerID, soundcloudID, swarmID, deviantartID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeed", reflect.TypeOf((*MockFeedServicer)(nil).GetFeed), twitterID, instagramID, bloggerID, soundcloudID, swarmID, deviantartID)
}

// Proxy mocks base method.
func (m *MockFeedServicer) Proxy(url string) ([]byte, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Proxy", url)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Proxy indicates an expected call of Proxy.
func (mr *MockFeedServicerMockRecorder) Proxy(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proxy", reflect.TypeOf((*MockFeedServicer)(nil).Proxy), url)
}
