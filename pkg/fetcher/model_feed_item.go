/*
 * Fetcher
 *
 * Fetch social media feeds
 *
 * API version: 1.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package fetcher

type FeedItem struct {

	// Unique identifier for a feed item
	Id string `json:"id"`

	// Unix timestamp (seconds) for when the item was published
	Ts int64 `json:"ts"`

	// The source platform the item is from
	Source string `json:"source"`

	// Permalink to the feed item on the platform
	Url string `json:"url,omitempty"`

	// Array of media items (images, videos, etc...)
	Media []FeedItemMedia `json:"media,omitempty"`

	// Text content for the item (may contain HTML)
	Content string `json:"content,omitempty"`
}

// AssertFeedItemRequired checks if the required fields are not zero-ed
func AssertFeedItemRequired(obj FeedItem) error {
	elements := map[string]interface{}{
		"id": obj.Id,
		"ts": obj.Ts,
		"source": obj.Source,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Media {
		if err := AssertFeedItemMediaRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseFeedItemRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of FeedItem (e.g. [][]FeedItem), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseFeedItemRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aFeedItem, ok := obj.(FeedItem)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertFeedItemRequired(aFeedItem)
	})
}
